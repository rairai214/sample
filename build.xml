<?xml version="1.0" encoding="UTF-8"?>
<project name="sample" default="all">
  
  
  <property file="build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.zip"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.gradle:_junit:junit:4.12.classpath">
    <pathelement location="${basedir}/../../../.gradle/caches/modules-2/files-2.1/junit/junit/4.12/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-4.12.jar"/>
  </path>
  
  <path id="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath">
    <pathelement location="${basedir}/../../../.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar"/>
  </path>
  
  <!-- Modules -->
  
  
  <!-- Module sample -->
  
  <dirname property="module.sample.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.sample" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="sample.output.dir" value="${module.sample.basedir}/out/production/sample"/>
  <property name="sample.testoutput.dir" value="${module.sample.basedir}/out/test/sample"/>
  
  <path id="sample.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="sample.module.production.classpath"/>
  
  <path id="sample.runtime.production.module.classpath">
    <pathelement location="${sample.output.dir}"/>
  </path>
  
  <path id="sample.module.classpath">
    <pathelement location="${sample.output.dir}"/>
  </path>
  
  <path id="sample.runtime.module.classpath">
    <pathelement location="${sample.testoutput.dir}"/>
    <pathelement location="${sample.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.sample">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.sample">
    <patternset refid="excluded.from.module.sample"/>
  </patternset>
  
  
  <target name="compile.module.sample" depends="compile.module.sample.production,compile.module.sample.tests" description="Compile module sample"/>
  
  <target name="compile.module.sample.production" description="Compile module sample; production classes"/>
  
  <target name="compile.module.sample.tests" depends="compile.module.sample.production" description="compile module sample; test classes" unless="skip.tests"/>
  
  <target name="clean.module.sample" description="cleanup module">
    <delete dir="${sample.output.dir}"/>
    <delete dir="${sample.testoutput.dir}"/>
  </target>
  
  
  <!-- Module sample_main -->
  
  <dirname property="module.sample_main.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.sample_main" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="sample_main.output.dir" value="${module.sample_main.basedir}/out/production/classes"/>
  <property name="sample_main.testoutput.dir" value="${module.sample_main.basedir}/out/production/classes"/>
  
  <path id="sample_main.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="sample_main.module.production.classpath"/>
  
  <path id="sample_main.runtime.production.module.classpath">
    <pathelement location="${sample_main.output.dir}"/>
  </path>
  
  <path id="sample_main.module.classpath">
    <pathelement location="${sample_main.output.dir}"/>
  </path>
  
  <path id="sample_main.runtime.module.classpath">
    <pathelement location="${sample_main.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.sample_main">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.sample_main">
    <patternset refid="excluded.from.module.sample_main"/>
  </patternset>
  
  <path id="sample_main.module.sourcepath">
    <dirset dir="${module.sample_main.basedir}/src/main">
      <include name="java"/>
      <!--<include name="resources"/>-->
    </dirset>
  </path>
  
  
  <target name="compile.module.sample_main" depends="compile.module.sample_main.production,compile.module.sample_main.tests" description="Compile module sample_main"/>
  
  <target name="compile.module.sample_main.production" description="Compile module sample_main; production classes">
    <mkdir dir="${sample_main.output.dir}"/>
    <javac destdir="${sample_main.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.sample_main}"/>
      <bootclasspath refid="sample_main.module.bootclasspath"/>
      <classpath refid="sample_main.module.production.classpath"/>
      <src refid="sample_main.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.sample_main"/>
    </javac>
    
    <copy todir="${sample_main.output.dir}">
      <fileset dir="${module.sample_main.basedir}/src/main/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <!--<fileset dir="${module.sample_main.basedir}/src/main/resources">-->
        <!--<patternset refid="compiler.resources"/>-->
        <!--<type type="file"/>-->
      <!--</fileset>-->
    </copy>
  </target>
  
  <target name="compile.module.sample_main.tests" depends="compile.module.sample_main.production" description="compile module sample_main; test classes" unless="skip.tests"/>
  
  <target name="clean.module.sample_main" description="cleanup module">
    <delete dir="${sample_main.output.dir}"/>
    <delete dir="${sample_main.testoutput.dir}"/>
  </target>
  
  
  <!-- Module sample_test -->
  
  <dirname property="module.sample_test.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.sample_test" value="-encoding UTF-8 -source 8 -target 1.8 ${compiler.args}"/>
  
  <property name="sample_test.output.dir" value="undefined"/>
  <property name="sample_test.testoutput.dir" value="${module.sample_test.basedir}/out/test/classes"/>
  
  <path id="sample_test.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="sample_test.module.production.classpath">
    <pathelement location="${sample_main.output.dir}"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="sample_test.runtime.production.module.classpath">
    <path refid="sample_main.runtime.production.module.classpath"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="sample_test.module.classpath">
    <pathelement location="${sample_main.output.dir}"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  <path id="sample_test.runtime.module.classpath">
    <pathelement location="${sample_test.testoutput.dir}"/>
    <path refid="sample_main.runtime.module.classpath"/>
    <path refid="library.gradle:_junit:junit:4.12.classpath"/>
    <path refid="library.gradle:_org.hamcrest:hamcrest-core:1.3.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.sample_test">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.sample_test">
    <patternset refid="excluded.from.module.sample_test"/>
  </patternset>
  
  <path id="sample_test.module.test.sourcepath">
    <dirset dir="${module.sample_test.basedir}/src/test">
      <include name="java"/>
      <!--<include name="resources"/>-->
    </dirset>
  </path>
  
  
  <target name="compile.module.sample_test" depends="compile.module.sample_test.production,compile.module.sample_test.tests" description="Compile module sample_test"/>
  
  <target name="compile.module.sample_test.production" depends="compile.module.sample_main" description="Compile module sample_test; production classes"/>
  
  <target name="compile.module.sample_test.tests" depends="compile.module.sample_test.production" description="compile module sample_test; test classes" unless="skip.tests">
    <mkdir dir="${sample_test.testoutput.dir}"/>
    <javac destdir="${sample_test.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.sample_test}"/>
      <bootclasspath refid="sample_test.module.bootclasspath"/>
      <classpath refid="sample_test.module.classpath"/>
      <src refid="sample_test.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.sample_test"/>
    </javac>
    
    <copy todir="${sample_test.testoutput.dir}">
      <fileset dir="${module.sample_test.basedir}/src/test/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <!--<fileset dir="${module.sample_test.basedir}/src/test/resources">-->
        <!--<patternset refid="compiler.resources"/>-->
        <!--<type type="file"/>-->
      <!--</fileset>-->
    </copy>
  </target>
  
  <target name="clean.module.sample_test" description="cleanup module">
    <delete dir="${sample_test.output.dir}"/>
    <delete dir="${sample_test.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.sample, clean.module.sample_main, clean.module.sample_test" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.sample, compile.module.sample_main, compile.module.sample_test" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>